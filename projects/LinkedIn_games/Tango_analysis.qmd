---
title: "LinkedIn games analysis pipeline"
author: "Ho Chin Wei"
date: "2025-06-01"
format: 
  html:
    theme: flatly
    smooth-scroll: true
categories: [code, analysis, bayesian]
---

This is a personal project to create a live analysis pipeline that will show descriptive analysis of daily LinkedIn games records between `PM` and `CW`. 

This pipeline will serve to elucidate who is the better overall player in LinkedIn games (Tango, Zip, Pinpoint and Cross climb) to date; between players `PM` and `CW`. Beginning from April 29th till today, **`r format(Sys.Date(), "%B %d, %Y")`**, data will continually be updated manually in the raw .xlsx file and ran through the pipeline for analysis when rendered. 

In addition to summarizing means, medians, and visualizing score distributions over time, this document also employs Bayesian independent‐samples t‐tests for each game type to quantify the strength of evidence for performance differences between PM and CW. In each case, Bayes factors (BF~10~) is computed along with prior and posterior distributions plotted to illustrate how observed data update our beliefs about any effect (see @nte-impt below).  

This document aims to describe, visualize, and evaluate, using both descriptive statistics and Bayesian hypothesis tests, to assess the differences in scores between the two players.  

```{r library, message = FALSE, warning = FALSE}
# Libraries utilized
library(tidyverse)
library(readxl)
library(car)
library(patchwork)
library(knitr)
library(kableExtra)
library(BayesFactor)

# Load the data in
dat <- read_xlsx("LinkedIn_games_data.xlsx")
```

To account for missing data (e.g., failure to complete Pinpoint guesses), "-" will be recoded into N.A. and listwise deletion will be conducted to remove the data for the day. Additionally, since the data is manually entered, it is recorded in wide format. The code below pivots the wide format into long format, which is simpler for analysis.

```{r data_wrangling}
#| code-fold: true
#| code-summary: "Show the code"

# Convert "-" into NA and all columns into double
dat <- dat %>% 
  mutate(across(where(is.character), ~ na_if(., "-"))) %>% 
  mutate(across(where(is.character), as.double)) 

# Change to long format
dat_long <- dat %>% 
  pivot_longer(
    cols = -date,
    names_to = c("Player", "Game_type"),
    names_sep = "_",
    values_to = "value"
  )
```

# Descriptive statistics

In this section, descriptive statistics will be computed during render.

```{r central_tendencies}
#| code-fold: true
#| code-summary: "Show the code"

# Calculate mean, median and SD for understanding average
summary_stats <- dat_long %>% 
  group_by(Player, Game_type) %>% 
  summarise(
    Mean = round(mean(value, na.rm = TRUE), 1),
    Median = round(median(value, na.rm = TRUE), 1),
    Standard_Deviation = round(sd(value, na.rm = TRUE), 1),
    .groups = "drop"
  )

# Store central tendencies scores for inline updating
## Tango (Mean)
mean_t_PM <- summary_stats %>%
  filter(Game_type == "T", Player == "PM") %>%
  pull(Mean)
mean_t_CW <- summary_stats %>%
  filter(Game_type == "T", Player == "CW") %>%
  pull(Mean)
## Zip (Mean)
mean_z_PM <- summary_stats %>%
  filter(Game_type == "Z", Player == "PM") %>%
  pull(Mean)
mean_z_CW <- summary_stats %>%
  filter(Game_type == "Z", Player == "CW") %>%
  pull(Mean)
## Pinpoint (Mean)
mean_p_PM <- summary_stats %>%
  filter(Game_type == "P", Player == "PM") %>%
  pull(Mean)
mean_p_CW <- summary_stats %>%
  filter(Game_type == "P", Player == "CW") %>%
  pull(Mean)
## Crossclimb (Mean)
mean_c_PM <- summary_stats %>%
  filter(Game_type == "C", Player == "PM") %>%
  pull(Mean)
mean_c_CW <- summary_stats %>%
  filter(Game_type == "C", Player == "CW") %>%
  pull(Mean)

## Tango (Median)
median_t_PM <- summary_stats %>%
  filter(Game_type == "T", Player == "PM") %>%
  pull(Median)
median_t_CW <- summary_stats %>%
  filter(Game_type == "T", Player == "CW") %>%
  pull(Median)
## Zip (Median)
median_z_PM <- summary_stats %>%
  filter(Game_type == "Z", Player == "PM") %>%
  pull(Median)
median_z_CW <- summary_stats %>%
  filter(Game_type == "Z", Player == "CW") %>%
  pull(Median)
## Pinpoint (Median)
median_p_PM <- summary_stats %>%
  filter(Game_type == "P", Player == "PM") %>%
  pull(Median)
median_p_CW <- summary_stats %>%
  filter(Game_type == "P", Player == "CW") %>%
  pull(Median)
## Crossclimb (Median)
median_c_PM <- summary_stats %>%
  filter(Game_type == "C", Player == "PM") %>%
  pull(Median)
median_c_CW <- summary_stats %>%
  filter(Game_type == "C", Player == "CW") %>%
  pull(Median)

# Build table for visualization
kable(summary_stats, 
        caption = "Summary statistics for each player and game type.", 
        align = "c")  
```

As of April 29  2025 through `r format(Sys.Date(), "%B %d, %Y")`, for **Tango**:

- PM’s average time is **`r mean_t_PM`** seconds, with the median time being **`r median_t_PM`** seconds.
- CW’s average time is **`r mean_t_CW`** seconds, with the median time being **`r median_t_CW`** seconds.

For **Zip**:

- PM’s average time is **`r mean_z_PM`** seconds, with the median time being **`r median_z_PM`** seconds.
- CW’s average time is **`r mean_z_CW`** seconds, with the median time being **`r median_z_CW`** seconds.

For **Pinpoint**:

- PM’s average number of tries is **`r mean_p_PM`**, the number of median tries being **`r median_p_PM`**.  
- CW’s average number of tries is **`r mean_p_CW`**, the number of median tries being **`r median_p_CW`**.  

For **Crossclimb**:

- PM’s average time is **`r mean_c_PM`** seconds, with the median time being **`r median_c_PM`** seconds.
- CW’s average time is **`r mean_c_CW`** seconds, with the median time being **`r median_c_CW`** seconds.

# Time-series visualizations

## Purpose of Time‐Series Visualizations

The time‐series plots display each player’s daily performance (e.g., completion time (seconds) or number of tries) on the x‐axis (date) and the corresponding score on the y‐axis. 

These visualizations provide comparisons of variability and stability to assess player score fluctuations and identify any days with unusually high or low values (and identify and potential outliers). It provides an intuitive and chronological overview of how PM and CW's LinkedIn game scores evolve.

The data is first subset into the four game type prior to visualizations.

```{r data-filtering}
#| code-fold: true
#| code-summary: "Show the code"

# Filter data subsequent between player visualization/analysis
dat_longT <- dat_long %>%
              filter(Game_type == "T") 
dat_longZ <- dat_long %>%
              filter(Game_type == "Z") 
dat_longP <- dat_long %>%
              filter(Game_type == "P") 
dat_longC <- dat_long %>%
              filter(Game_type == "C") 
```

::: {.panel-tabset}

## Tango

```{r t-ts, warning = FALSE}
#| code-fold: true
#| code-summary: "Show the code"

ggplot(dat_longT, aes(x = date, y = value, color = Player)) +
  geom_line(size = 1) +
  labs(
    title = "Tango Time-Series Plot",
    x = "Date",
    y = "Seconds"
  ) +
  theme_minimal()
```

## Zip

```{r z-ts, warning = FALSE}
#| code-fold: true
#| code-summary: "Show the code"

ggplot(dat_longZ, aes(x = date, y = value, color = Player)) +
  geom_line(size = 1) +
  labs(
    title = "Zip Time-Series Plot",
    x = "Date",
    y = "Seconds"
  ) +
  theme_minimal()
```

## Pinpoint

```{r p-ts, warning = FALSE}
#| code-fold: true
#| code-summary: "Show the code"

ggplot(dat_longP, aes(x = date, y = value, color = Player)) +
  geom_line(size = 1) +
  labs(
    title = "Pinpoint Time-Series Plot",
    x = "Date",
    y = "Tries"
  ) +
  theme_minimal()
```

## Crossclimb

```{r c-ts, warning = FALSE}
#| code-fold: true
#| code-summary: "Show the code"

ggplot(dat_longC, aes(x = date, y = value, color = Player)) +
  geom_line(size = 1) +
  labs(
    title = "Crossclimb Time-Series Plot",
    x = "Date",
    y = "Seconds"
  ) +
  theme_minimal()
```

:::

# Boxplot comparisons

In this section, boxplots are created to provide a concise visual summary of the score distributions for each game type, comparing PM and CW's performance at a glance. The boxplots show the median, interquartile range (IQR), and potential outliers for each player. 

Visual inspection of these boxplots can highlight difference or overlaps in score distributions, which can inform interpretation of subsequent Bayesian independent-samples t-test results later.

::: {.panel-tabset}

## Tango
```{r boxplot_tango, warning = FALSE, message = FALSE}
#| code-fold: true
#| code-summary: "Show the code"
Tango_box <- ggplot(subset(dat_long, Game_type == "T"), aes(x = Player, y = value)) +
              geom_boxplot() +
              labs(title = "Tango Comparisons", x = "Tango", y = "Seconds") +
              coord_cartesian(ylim = c(0, 100)) +
              theme_minimal() +
              theme(
                axis.line = element_line(color = "black"), 
                plot.title = element_text(hjust = 0.5, size = 16, face = "bold"), 
                axis.title = element_text(size = 12),
                panel.grid.major = element_line(color = "gray95", size = 0.1),
                panel.grid.minor = element_line(color = "gray95", size = 0.1)
              )

Tango_box
```

## Zip

```{r boxplot_zip, warning = FALSE, message = FALSE}
#| code-fold: true
#| code-summary: "Show the code"
Zip_box <- ggplot(subset(dat_long, Game_type == "Z"), aes(x = Player, y = value)) +
            geom_boxplot() +
            labs(title = "Zip Comparisons", x = "Zip", y = "Seconds") +
            coord_cartesian(ylim = c(0, 100)) +
            theme_minimal() +
            theme(
              axis.line = element_line(color = "black"), 
              plot.title = element_text(hjust = 0.5, size = 16, face = "bold"), 
              axis.title = element_text(size = 12),
              panel.grid.major = element_line(color = "gray95", size = 0.1),
              panel.grid.minor = element_line(color = "gray95", size = 0.1)
            )

Zip_box
```

## Pinpoint

```{r boxplot_pinpoint, warning = FALSE, message = FALSE}
#| code-fold: true
#| code-summary: "Show the code"
Pinpoint_box <- ggplot(subset(dat_long, Game_type == "P"), aes(x = Player, y = value)) +
                  geom_boxplot() +
                  labs(title = "Pinpoint Comparisons", x = "Pinpoint", y = "Tries") +
                  coord_cartesian(ylim = c(0, 6)) +
                  theme_minimal() +
                  theme(
                    axis.line = element_line(color = "black"), 
                    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"), 
                    axis.title = element_text(size = 12),
                    panel.grid.major = element_line(color = "gray95", size = 0.1),
                    panel.grid.minor = element_line(color = "gray95", size = 0.1)
                  )

Pinpoint_box
```

## Crossclimb

```{r outlier_visualization, warning = FALSE, message = FALSE}
#| code-fold: true
#| code-summary: "Show the code"
Crossclimb_box <- ggplot(subset(dat_long, Game_type == "C"), aes(x = Player, y = value)) +
                    geom_boxplot() +
                    labs(title = "Crossclimb Comparisons", x = "Crossclimb", y = "Seconds") +
                    coord_cartesian(ylim = c(0, 100)) +
                    theme_minimal() +
                    theme(
                      axis.line = element_line(color = "black"), 
                      plot.title = element_text(hjust = 0.5, size = 16, face = "bold"), 
                      axis.title = element_text(size = 12),
                      panel.grid.major = element_line(color = "gray95", size = 0.1),
                      panel.grid.minor = element_line(color = "gray95", size = 0.1)
                    )

Crossclimb_box
```

:::

# Bayesian Independent T-test comparisons

Here, using Bayesian Independent-samples t-tests, evidence for or against a difference in performance between PM and CW for each game type will be quantified. For each comparison, the Bayes factor (BF~10~) ia computed to measure the relative support for the alternative hypothesis (that the two players differ in average game scores) over the null hypothesis (no difference). 

Additionally, prior (default) and posterior distributions of the standardized effect size will be calculated to assess how the observed data update beliefs under the default Cauchy prior (scale = 0.707)

::: {#nte-impt .callout-note}
# IMPORTANT NOTE
The subsequent analysis is made purely for fun. This is not a formalized statistics project, and even though Bayesian analysis is more robust to [optional-stopping](https://www.analytics-toolkit.com/glossary/peeking/) than frequentist methods, there are important considerations.

- Continously re-running the analysis with the same default prior (Cauchy scale = 0.707) without formally updating it in light of past data can produce Bayes factors that are not strictly coherent under sequential updating. 

- Proper sequential analysis would require recalculating the posterior at each stage and using that as the new prior for the next stage. Here, the analysis always begins from the default prior, which may under or overestimate evidence until enough data have accumulated. **Each Bayes Factor value should be regarded as snapshots of a formal sequentially updated analysis.**

**These results can only be used as informal visualization and intuitive understanding rather than confirmatory statistical proof.**
:::

## Homogenity of Variance Assumptions

Runs Levene's test as a check of homogenity of variance for each game type subsets. Although Bayesian t‐tests are typically robust to mild heterogeneity of variance, it remains good practice to understand whether this assumption might be violated.

::: {.panel-tabset}

## Tango
```{r T-HoV}
#| code-fold: true
#| code-summary: "Show the code"

# Levene's test of homogenity of variance
levene_T <- leveneTest(value ~ as.factor(Player), data = dat_longT)
levene_T_df <- as.data.frame(levene_T)

# Clean up df formatting
levene_T_df <- levene_T_df %>% 
  mutate(
    `Df` = Df,
    `F Value` = round(`F value`, 3),
    `Pr(>F)` = signif(`Pr(>F)`, 3)
  ) %>% 
  select(`Df`, `F Value`, `Pr(>F)`)

# Create Clean table
levene_T_df %>% 
  kable(
    caption = "Levene’s Test for Homogeneity of Variance",
    col.names = c("Degrees of Freedom", "F Statistic", "p-value"),
    format = "html"
  ) %>% 
  kable_styling(full_width = FALSE, position = "center", bootstrap_options = c("striped", "hover")) 

```

## Zip
```{r Z-HoV}
#| code-fold: true
#| code-summary: "Show the code"

# Levene's test of homogenity of variance
levene_Z <- leveneTest(value ~ as.factor(Player), data = dat_longZ)
levene_Z_df <- as.data.frame(levene_Z)

# Clean up df formatting
levene_Z_df <- levene_Z_df %>% 
  mutate(
    `Df` = Df,
    `F Value` = round(`F value`, 3),
    `Pr(>F)` = signif(`Pr(>F)`, 3)
  ) %>% 
  select(`Df`, `F Value`, `Pr(>F)`)

# Create Clean table
levene_Z_df %>% 
  kable(
    caption = "Levene’s Test for Homogeneity of Variance",
    col.names = c("Degrees of Freedom", "F Statistic", "p-value"),
    format = "html"
  ) %>% 
  kable_styling(full_width = FALSE, position = "center", bootstrap_options = c("striped", "hover"))
```

## Pinpoint
```{r P-HoV}
#| code-fold: true
#| code-summary: "Show the code"

# Levene's test of homogenity of variance
levene_P <- leveneTest(value ~ as.factor(Player), data = dat_longP)
levene_P_df <- as.data.frame(levene_P)

# Clean up df formatting
levene_P_df <- levene_P_df %>% 
  mutate(
    `Df` = Df,
    `F Value` = round(`F value`, 3),
    `Pr(>F)` = signif(`Pr(>F)`, 3)
  ) %>% 
  select(`Df`, `F Value`, `Pr(>F)`)

# Create Clean table
levene_P_df %>% 
  kable(
    caption = "Levene’s Test for Homogeneity of Variance",
    col.names = c("Degrees of Freedom", "F Statistic", "p-value"),
    format = "html"
  ) %>% 
  kable_styling(full_width = FALSE, position = "center", bootstrap_options = c("striped", "hover"))
```

## Crossclimb
```{r C-HoV}
#| code-fold: true
#| code-summary: "Show the code"

# Levene's test of homogenity of variance
levene_C <- leveneTest(value ~ as.factor(Player), data = dat_longC)
levene_C_df <- as.data.frame(levene_C)

# Clean up df formatting
levene_C_df <- levene_C_df %>% 
  mutate(
    `Df` = Df,
    `F Value` = round(`F value`, 3),
    `Pr(>F)` = signif(`Pr(>F)`, 3)
  ) %>% 
  select(`Df`, `F Value`, `Pr(>F)`)

# Create Clean table
levene_C_df %>% 
  kable(
    caption = "Levene’s Test for Homogeneity of Variance",
    col.names = c("Degrees of Freedom", "F Statistic", "p-value"),
    format = "html"
  ) %>% 
  kable_styling(full_width = FALSE, position = "center", bootstrap_options = c("striped", "hover"))
```
:::

## Bayes Factor computation 

::: {.panel-tabset}

## Tango

Bayes factor computation for Tango between PM and CW.

```{r T-tt, warning = FALSE}
#| code-fold: true
#| code-summary: "Show the code"

# Filter out PM’s values (remove NA from 'value')
tango_pm <- dat_longT %>%
  filter(Player == "PM", !is.na(value)) %>%
  pull(value)

# Filter out CW’s values (remove NA from 'value')
tango_cw <- dat_longT %>%
  filter(Player == "CW", !is.na(value)) %>%
  pull(value)

# Run Bayesian two-sample t-test
bf_obj_tango <- ttestBF(
  x = tango_pm,
  y = tango_cw,
  paired = FALSE
)

# extractBF() returns a data frame; the “bf” column is the numeric Bayes Factor
bf_tango <- extractBF(bf_obj_tango)$bf[1]

# Build a simple one‐row data.frame for kable()
data.frame(
  "Game Type" = "Tango",
  "BF10"      = round(bf_tango, 3),
  "Notes"     = if (bf_tango > 1) {
                   "Evidence favoring difference (H1)"
                 } else {
                   "Evidence favoring H0 or inconclusive"
                 }
) %>%
  # Display as HTML table with caption and styling
  kable(
    caption   = "Bayesian independent‐samples t‐test (Tango)",
    col.names = c("Game Type", "BF₁₀", "Notes"),
    format    = "html"
  ) %>%
  kable_styling(
    full_width        = FALSE,
    position          = "center",
    bootstrap_options = c("striped", "hover")
  )
```

Visualizations of posterior and prior distributions.

```{r T-pd, warning = FALSE}
#| code-fold: true
#| code-summary: "Show the code"

# Obtain 10,000 posterior samples of the standardized effect size (delta)
posterior_samples_T <- posterior(bf_obj_tango, iterations = 10000)

# Convert to a data frame for easier handling
posterior_df_T <- as.data.frame(posterior_samples_T)

# Create a sequence of effect size (delta) values for the prior
delta_range_T <- seq(-3, 3, length.out = 1000)  # reasonable range for visualization

# Compute the density of the default Cauchy prior (scale = 0.707)
prior_density_T <- dcauchy(delta_range_T, location = 0, scale = sqrt(2) / 2)

# Create a data frame for the prior distribution
prior_df_T <- data.frame(
  delta = delta_range_T,
  density = prior_density_T,
  Distribution = "Prior"
)

# Compute the density of the posterior samples
posterior_density_T <- density(posterior_df_T$delta, adjust = 1.5)  # adjust can be tuned for smoothing

posterior_df_density_T <- data.frame(
  delta = posterior_density_T$x,
  density = posterior_density_T$y,
  Distribution = "Posterior"
)

# Combine prior and posterior data frames
combined_df_T <- rbind(prior_df_T, posterior_df_density_T)

# Plot both distributions
ggplot(combined_df_T, aes(x = delta, y = density, color = Distribution, fill = Distribution)) +
  geom_line(size = 1) +
  geom_area(alpha = 0.2, position = "identity") +
  geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
  labs(
    title = "Prior and Posterior Distributions of Effect Size (δ)",
    subtitle = "Tango: PM vs. CW",
    x = "Effect Size (δ)",
    y = "Density"
  ) +
  scale_color_manual(values = c("Prior" = "#00CFC1", "Posterior" = "#FF6B5C")) +
  scale_fill_manual(values = c("Prior" = "#00CFC1", "Posterior" = "#FF6B5C")) +
  theme_minimal(base_size = 14)
```

## Zip

Bayes factor computation for Zip.

```{r Z-tt}
#| code-fold: true
#| code-summary: "Show the code"

# Filter out PM’s values (remove NA from 'value')
zip_pm <- dat_longZ %>%
  filter(Player == "PM", !is.na(value)) %>%
  pull(value)

# Filter out CW’s values (remove NA from 'value')
zip_cw <- dat_longZ %>%
  filter(Player == "CW", !is.na(value)) %>%
  pull(value)

# Run Bayesian two-sample t-test
bf_obj_zip <- ttestBF(
  x = zip_pm,
  y = zip_cw,
  paired = FALSE
)

# extractBF() returns a data frame; the “bf” column is the numeric Bayes Factor
bf_zip <- extractBF(bf_obj_zip)$bf[1]

# Build a simple one‐row data.frame for kable()
data.frame(
  "Game Type" = "Zip",
  "BF10"      = round(bf_zip, 3),
  "Notes"     = if (bf_zip > 1) {
                   "Evidence favoring difference (H1)"
                 } else {
                   "Evidence favoring H0 or inconclusive"
                 }
) %>%
  # Display as HTML table with caption and styling
  kable(
    caption   = "Bayesian independent‐samples t‐test (Zip)",
    col.names = c("Game Type", "BF₁₀", "Notes"),
    format    = "html"
  ) %>%
  kable_styling(
    full_width        = FALSE,
    position          = "center",
    bootstrap_options = c("striped", "hover")
  )
```

Visualizations of posterior and prior distributions.

```{r Z-pd, warning = FALSE}
#| code-fold: true
#| code-summary: "Show the code"

# Obtain 10,000 posterior samples of the standardized effect size (delta)
posterior_samples_Z <- posterior(bf_obj_zip, iterations = 10000)

# Convert to a data frame for easier handling
posterior_df_Z <- as.data.frame(posterior_samples_Z)

# Create a sequence of effect size (delta) values for the prior
delta_range_Z <- seq(-3, 3, length.out = 1000)  # reasonable range for visualization

# Compute the density of the default Cauchy prior (scale = 0.707)
prior_density_Z <- dcauchy(delta_range_Z, location = 0, scale = sqrt(2) / 2)

# Create a data frame for the prior distribution
prior_df_Z <- data.frame(
  delta = delta_range_Z,
  density = prior_density_Z,
  Distribution = "Prior"
)

# Compute the density of the posterior samples
posterior_density_Z <- density(posterior_df_Z$delta, adjust = 1.5)  # adjust can be tuned for smoothing

posterior_df_density_Z <- data.frame(
  delta = posterior_density_Z$x,
  density = posterior_density_Z$y,
  Distribution = "Posterior"
)

# Combine prior and posterior data frames
combined_df_Z <- rbind(prior_df_Z, posterior_df_density_Z)

# Plot both distributions
ggplot(combined_df_Z, aes(x = delta, y = density, color = Distribution, fill = Distribution)) +
  geom_line(size = 1) +
  geom_area(alpha = 0.2, position = "identity") +
  geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
  labs(
    title = "Prior and Posterior Distributions of Effect Size (δ)",
    subtitle = "Zip: PM vs. CW",
    x = "Effect Size (δ)",
    y = "Density"
  ) +
  scale_color_manual(values = c("Prior" = "#00CFC1", "Posterior" = "#FF6B5C")) +
  scale_fill_manual(values = c("Prior" = "#00CFC1", "Posterior" = "#FF6B5C")) +
  theme_minimal(base_size = 14)
```

## Pinpoint

Bayes factor computation for Pinpoint.

```{r pp-tt}
#| code-fold: true
#| code-summary: "Show the code"

# Filter out PM’s values (remove NA from 'value')
pp_pm <- dat_longP %>%
  filter(Player == "PM", !is.na(value)) %>%
  pull(value)

# Filter out CW’s values (remove NA from 'value')
pp_cw <- dat_longP %>%
  filter(Player == "CW", !is.na(value)) %>%
  pull(value)

# Run Bayesian two-sample t-test
bf_obj_pp <- ttestBF(
  x = pp_pm,
  y = pp_cw,
  paired = FALSE
)

# extractBF() returns a data frame; the “bf” column is the numeric Bayes Factor
bf_pp <- extractBF(bf_obj_pp)$bf[1]

# Build a simple one‐row data.frame for kable()
data.frame(
  "Game Type" = "Pinpoint",
  "BF10"      = round(bf_pp, 3),
  "Notes"     = if (bf_pp > 1) {
                   "Evidence favoring difference (H1)"
                 } else {
                   "Evidence favoring H0 or inconclusive"
                 }
) %>%
  # Display as HTML table with caption and styling
  kable(
    caption   = "Bayesian independent‐samples t‐test (Pinpoint)",
    col.names = c("Game Type", "BF₁₀", "Notes"),
    format    = "html"
  ) %>%
  kable_styling(
    full_width        = FALSE,
    position          = "center",
    bootstrap_options = c("striped", "hover")
  )
```

Visualizations of posterior and prior distributions.

```{r pp-pd, warning = FALSE}
#| code-fold: true
#| code-summary: "Show the code"

# Obtain 10,000 posterior samples of the standardized effect size (delta)
posterior_samples_pp <- posterior(bf_obj_pp, iterations = 10000)

# Convert to a data frame for easier handling
posterior_df_pp <- as.data.frame(posterior_samples_pp)

# Create a sequence of effect size (delta) values for the prior
delta_range_pp <- seq(-3, 3, length.out = 1000)  # reasonable range for visualization

# Compute the density of the default Cauchy prior (scale = 0.707)
prior_density_pp <- dcauchy(delta_range_pp, location = 0, scale = sqrt(2) / 2)

# Create a data frame for the prior distribution
prior_df_pp <- data.frame(
  delta = delta_range_pp,
  density = prior_density_pp,
  Distribution = "Prior"
)

# Compute the density of the posterior samples
posterior_density_pp <- density(posterior_df_pp$delta, adjust = 1.5)  # adjust can be tuned for smoothing

posterior_df_density_pp <- data.frame(
  delta = posterior_density_pp$x,
  density = posterior_density_pp$y,
  Distribution = "Posterior"
)

# Combine prior and posterior data frames
combined_df_pp <- rbind(prior_df_pp, posterior_df_density_pp)

# Plot both distributions
ggplot(combined_df_pp, aes(x = delta, y = density, color = Distribution, fill = Distribution)) +
  geom_line(size = 1) +
  geom_area(alpha = 0.2, position = "identity") +
  geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
  labs(
    title = "Prior and Posterior Distributions of Effect Size (δ)",
    subtitle = "Pinpoint: PM vs. CW",
    x = "Effect Size (δ)",
    y = "Density"
  ) +
  scale_color_manual(values = c("Prior" = "#00CFC1", "Posterior" = "#FF6B5C")) +
  scale_fill_manual(values = c("Prior" = "#00CFC1", "Posterior" = "#FF6B5C")) +
  theme_minimal(base_size = 14)
```

## Crossclimb

Bayes factor computation for Crossclimb.

```{r C-tt}
#| code-fold: true
#| code-summary: "Show the code"

# Filter out PM’s values (remove NA from 'value')
cc_pm <- dat_longC %>%
  filter(Player == "PM", !is.na(value)) %>%
  pull(value)

# Filter out CW’s values (remove NA from 'value')
cc_cw <- dat_longC %>%
  filter(Player == "CW", !is.na(value)) %>%
  pull(value)

# Run Bayesian two-sample t-test
bf_obj_cc <- ttestBF(
  x = cc_pm,
  y = cc_cw,
  paired = FALSE
)

# extractBF() returns a data frame; the “bf” column is the numeric Bayes Factor
bf_cc <- extractBF(bf_obj_cc)$bf[1]

# Build a simple one‐row data.frame for kable()
data.frame(
  "Game Type" = "Crossclimb",
  "BF10"      = round(bf_cc, 3),
  "Notes"     = if (bf_cc > 1) {
                   "Evidence favoring difference (H1)"
                 } else {
                   "Evidence favoring H0 or inconclusive"
                 }
) %>%
  # Display as HTML table with caption and styling
  kable(
    caption   = "Bayesian independent‐samples t‐test (Crossclimb)",
    col.names = c("Game Type", "BF₁₀", "Notes"),
    format    = "html"
  ) %>%
  kable_styling(
    full_width        = FALSE,
    position          = "center",
    bootstrap_options = c("striped", "hover")
  )
```

Visualizations of posterior and prior distributions.

```{r cc-pd, warning = FALSE}
#| code-fold: true
#| code-summary: "Show the code"

# Obtain 10,000 posterior samples of the standardized effect size (delta)
posterior_samples_cc <- posterior(bf_obj_cc, iterations = 10000)

# Convert to a data frame for easier handling
posterior_df_cc <- as.data.frame(posterior_samples_cc)

# Create a sequence of effect size (delta) values for the prior
delta_range_cc <- seq(-3, 3, length.out = 1000)  # reasonable range for visualization

# Compute the density of the default Cauchy prior (scale = 0.707)
prior_density_cc <- dcauchy(delta_range_cc, location = 0, scale = sqrt(2) / 2)

# Create a data frame for the prior distribution
prior_df_cc <- data.frame(
  delta = delta_range_cc,
  density = prior_density_cc,
  Distribution = "Prior"
)

# Compute the density of the posterior samples
posterior_density_cc <- density(posterior_df_cc$delta, adjust = 1.5)  # adjust can be tuned for smoothing

posterior_df_density_cc <- data.frame(
  delta = posterior_density_cc$x,
  density = posterior_density_cc$y,
  Distribution = "Posterior"
)

# Combine prior and posterior data frames
combined_df_cc <- rbind(prior_df_cc, posterior_df_density_cc)

# Plot both distributions
ggplot(combined_df_cc, aes(x = delta, y = density, color = Distribution, fill = Distribution)) +
  geom_line(size = 1) +
  geom_area(alpha = 0.2, position = "identity") +
  geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
  labs(
    title = "Prior and Posterior Distributions of Effect Size (δ)",
    subtitle = "Crossclimb: PM vs. CW",
    x = "Effect Size (δ)",
    y = "Density"
  ) +
  scale_color_manual(values = c("Prior" = "#00CFC1", "Posterior" = "#FF6B5C")) +
  scale_fill_manual(values = c("Prior" = "#00CFC1", "Posterior" = "#FF6B5C")) +
  theme_minimal(base_size = 14)
```

:::


